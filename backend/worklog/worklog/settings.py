"""
Django settings for worklog project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import sys
from dotenv import load_dotenv
from decouple import config
import logging

logger = logging.getLogger('django')

SECRET_KEY = config('SECRET_KEY', default='fallback_secret_key')
BASE_URL = config('BASE_URL', default='http://127.0.0.1:8000')
REACT_APP_BASE_URL = config('REACT_APP_BASE_URL', default='http://127.0.0.1:3000/login/redirect')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
#Base directory == worklog/backend/worklog
BASE_DIR = Path(__file__).resolve().parent.parent

dotenv_path = BASE_DIR.parent / '.env'
load_dotenv(dotenv_path)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

#s3 접근용 키
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
AWS_REGION_NAME = os.getenv("AWS_REGION_NAME")


# s3 설정
AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_REGION_NAME}.amazonaws.com"

# S3 파일 캐싱 및 압축 처리
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',  # 24시간 캐시
}

# 테스트 환경에서는 로컬 스토리지를 사용
if 'test' in sys.argv:
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
#배포 환경에서는 s3 사용
elif DEBUG == False:
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"
    MEDIA_ROOT = None
#개발 환경에서는 로컬 스토리지 사용
else:
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

#POSTGRESQL data
POSTGRESQL_USER = os.getenv("POSTGRESQL_USER")
POSTGRESQL_PASSWORD = os.getenv("POSTGRESQL_PASSWORD")
POSTGRESQL_DB_NAME = os.getenv("POSTGRESQL_DB_NAME")
POSTGRESQL_PORT = os.getenv("POSTGRESQL_PORT")
POSTGRESQL_HOST = os.getenv("POSTGRESQL_HOST")

#gpt key를 환경변수로 설정
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "15.164.56.168",
    "api.worklog.my",
    "worklog.my"
]

# CORS
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = [
    'https://api.worklog.my',
    'http://api.worklog.my',
]
CORS_ALLOW_CREDENTIALS = True
# CORS_ALLOW_HEADERS = '*'

# CSRF
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    "http://15.164.56.168",
    "https://15.164.56.168",
    "http://worklog.my",
    "http://api.worklog.my",
    "https://worklog.my",
    "https://api.worklog.my",
    ]

CSRF_COOKIE_NAME = "csrftoken"
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SECURE = True

CSRF_COOKIE_HTTPONLY = True

SESSION_COOKIE_SECURE = True
SESSION_COOKIE_SAMESITE = 'Lax'

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    # Auth Settings
    
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.kakao",
    "allauth.socialaccount.providers.google",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "rest_framework.authtoken",
        
    "rest_framework",
    "corsheaders",
    "profiles",
    
    # s3 저장
    'storages',

]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    
    'allauth.account.middleware.AccountMiddleware', 
]
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

ROOT_URLCONF = "worklog.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "worklog.wsgi.application"

#테스트 코드 경로를 탐색기
TEST_RUNNER = 'django.test.runner.DiscoverRunner'

# 테스트 환경에서는 sqlite 사용
if os.environ.get('GITHUB_ACTIONS'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
#로컬 테스트 코드 작동 시 sqlite 사용
elif 'test' in sys.argv:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db_test.sqlite3'),
        }
    }
#개발환경에서는 splite 사용
elif DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db_test.sqlite3'),
        }
    }
#배포환경에서는 postgre 사용
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": POSTGRESQL_DB_NAME,
            "USER": POSTGRESQL_USER,
            "PASSWORD": POSTGRESQL_PASSWORD,
            "HOST": POSTGRESQL_HOST,
            "PORT": POSTGRESQL_PORT,

        }
    }

AUTH_USER_MODEL = 'profiles.User'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

SITE_ID = 1

# account

ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_AUTHENTICATION_METHOD = 'username'
ACCOUNT_EMAIL_REQUIRED = False
ACCOUNT_USERNAME_REQUIRED = True



REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'profiles.serializers.UserRegisterSerializer',
}

REST_USE_JWT = True     #JSON Web Token을 사용하겠다는 설정

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True




# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [BASE_DIR, 'static']

STATIC_ROOT = BASE_DIR / 'staticfiles/'

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# GitHub Actions 환경에서 테스트할 때는 콘솔에 출력
if os.environ.get('GITHUB_ACTIONS'):
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {pathname} {funcName}:{lineno} {message}\n{exc_info}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {module} {message}',
                'style': '{',
            },
        },
        'handlers': {
            'console': {
                'level': 'ERROR',
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': 'ERROR',
                'propagate': True,
            },
        },
    }

# 개발 환경에서는 콘솔에 로그 출력
elif DEBUG:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {pathname} {funcName}:{lineno} {message}\n{exc_info}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {module} {message}',
                'style': '{',
            },
        },
        'handlers': {
            'console': {
                'level': 'ERROR',
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': 'ERROR',
                'propagate': True,
            },
        },
    }

# 배포 환경에서는 파일에 로그 출력
else:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {pathname} {funcName}:{lineno} {message}\n{exc_info}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {module} {message}',
                'style': '{',
            },
        },
        'handlers': {
            'file': {
                'level': 'ERROR',
                'class': 'logging.FileHandler',
                'filename': os.path.join(BASE_DIR, 'log', 'django_errors.log'),
                'formatter': 'verbose',
            }
        },
        'loggers': {
            'django': {
                'handlers': ['file'],
                'level': 'ERROR',
                'propagate': True,
            },
        },
    }
